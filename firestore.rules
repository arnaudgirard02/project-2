rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      return isAuthenticated() && request.auth.token.email == "arnaud7.girard@hotmail.fr";
    }

    // Subscriptions collection
    match /subscriptions/{userId} {
      allow read: if isAuthenticated();
      allow create, update: if isOwner(userId) || isAdmin();
      allow delete: if false;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if false;
    }

    // Exercises collection
    match /exercises/{exerciseId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      allow update: if isAuthenticated() && (
        isAdmin() ||
        resource.data.userId == request.auth.uid ||
        (
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['metadata']) &&
          (
            request.resource.data.metadata.diff(resource.data.metadata).affectedKeys()
              .hasOnly(['likes']) ||
            request.resource.data.metadata.diff(resource.data.metadata).affectedKeys()
              .hasOnly(['comments', 'lastModified']) ||
            request.resource.data.metadata.diff(resource.data.metadata).affectedKeys()
              .hasOnly(['version', 'lastModified']) ||
            request.resource.data.metadata.diff(resource.data.metadata).affectedKeys()
              .hasOnly(['reports', 'lastModified'])
          )
        )
      );
      allow delete: if isAuthenticated() && (isAdmin() || resource.data.userId == request.auth.uid);
    }
  }
}